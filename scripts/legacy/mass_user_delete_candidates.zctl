# Setup Zope security and REQUEST

from AccessControl.SecurityManagement import newSecurityManager
from Testing.makerequest import makerequest
from Products.CMFCore.tests.base.security import AnonymousUser, OmnipotentUser
from Products.AdvancedQuery import Eq, MatchGlob, Or, And
import sys
import transaction
import DateTime

user = OmnipotentUser().__of__(app)
newSecurityManager(None, user)
app=makerequest(app)
app.REQUEST.set('PARENTS',[app])
app.REQUEST.set('REQUEST_METHOD','POST')
portal = app.plone
context = app.plone

mtool = context.portal_membership
gtool = context.portal_groups
pwt = context.portal_password_reset

pcat = context.portal_catalog
mcat = context.member_catalog
ccat = context.content.catalog
lcat = context.lens_catalog

mfolder = mtool.getMembersFolder()

pwt.clearExpired()
pendingaccounts = [user for (user,expiry) in pwt._requests.values()]

ndate = DateTime.now()

delete = []
#for line in sys.stdin:
#      query = Or(MatchGlob('fullname',line),MatchGlob('email',line),MatchGlob('getUserName',line))
#      candidates = [c.getUserName for c in mcat.evalAdvancedQuery(query,('getUserName',)) if c.getObject().account_type == 'person']
for line in '*':
    candidates = [c.getUserName for c in mtool.searchForMembers(name=line) if mtool.getMemberById(c.getUserName) and c.getObject().account_type == 'person']
    print "Candidates: %d" % len(candidates)
    unpub = [u for u in candidates if not(ccat({'authors':u})+ccat({'maintainers':u})+ccat({'licensors':u})+ccat({'editors':u})+ccat({'translators':u}))]
    print "Not published: %d" % len(unpub)
    nogroups = [nofriend for nofriend in unpub if not(gtool.getGroupsByUserId(nofriend))]
    print "No groups: %d" % len(nogroups)
    nofoldercontents = [nf for nf in nogroups if not(mfolder.has_key(nf) and len(mfolder[nf].objectIds()) or 0)]
    print "No content: %d" % len(nofoldercontents)
    nolenses = [nl for nl in nofoldercontents if not(lcat({'Creator':nl}))]
    print "No lenses: %d" % len(nolenses)
#    noportal = [np for np in nolenses if not(pcat({'Creator':np}))]
#    print "No portalcontent: %d" % len(noportal)
#    notnew = [nn for nn in noportal if nn not in pendingaccounts]
    notnew = [nn for nn in nolenses if nn not in pendingaccounts]
    print "Not new: %d" % len(notnew)
    notthisyear = [nty for nty in notnew if ndate - mtool.getMemberById(nty).getProperty('login_time') > 365]
    print "Not logged in this year (365 days): %d" % len(notthisyear)
    delete.extend(notthisyear)
      
print "Candidates for deletion: %d" % (len(delete),)

fname = ndate.strftime('%Y-%m-%d_%H_%M')
cf = open ('candidates_deletion_%s.txt' % fname , 'w')

cf.write('\n'.join(delete))
cf.write('\n')
cf.close()

# deleted=[]
# if delete:
#     for c,u in enumerate(delete):
#         try:
#             mcat.uncatalog_object(mcat(getUserName=u)[0].getPath())
#         except:
#             print "failure to uncatalog: userid %s" % (u,)
#             continue
#         deleted.append(u)
#         if not((c+1)%100):
#             mtool.deleteMembers(deleted, delete_memberareas=1, delete_localroles=1, REQUEST=context.REQUEST)
#             print "deleted: %d" % (c+1,)
#             deleted=[]
#             transaction.commit()
#     mtool.deleteMembers(deleted, delete_memberareas=1, delete_localroles=1, REQUEST=context.REQUEST)
#     print "deleted: %d" % (c+1,)
#     deleted=[]
#     transaction.commit()
            
