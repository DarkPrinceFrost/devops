# This is a basic VCL configuration file for varnish.  See the vcl(7)
# man page for details on VCL syntax and semantics.
C{
        #include <string.h>
        #include <stdlib.h>
        #include <time.h>

        void TIM_format(double t, char *p);
        double TIM_real(void);
        time_t TIM_parse(const char *p);
}C

acl block {
"117.135.145.84"; 
"117.135.145.92";
"117.135.145.93";
"117.135.145.94";
"218.202.227.151";
"218.202.227.152";
"218.202.227.153";
"218.202.227.155";
"218.202.227.156";
"218.202.227.157";
"218.202.227.158";
"221.130.177.108";
"221.130.177.109";
"221.130.177.110";
"221.130.177.111";
"221.130.177.112";
"221.130.177.113";
"221.181.66.210";
"221.181.66.211";
"221.181.66.226";
"221.181.66.227";
"221.181.66.240";
"221.181.66.241";
"67.195.112.112";
"216.7.224.242";
}


# haproxy balancer
backend legacy_backend {
.host = "legacydev.cnx.org";
.port = "8888";
.connect_timeout = 0.4s;
.first_byte_timeout = 1200s;
.between_bytes_timeout = 600s;
}

# hatjitsu
backend hatjitsu_backend {
.host = "hatjitsu.cnx.org";
.port = "5000";
.connect_timeout = 0.4s;
}

## mobile
#backend backend_1 {
#.host = "128.42.169.31";
#.port = "5000";
#.connect_timeout = 0.4s;
#.first_byte_timeout = 600s;
#.between_bytes_timeout = 60s;
#}

# static files
backend static_backend {
.host = "alpha.cnx.org";
.port = "8080";
.connect_timeout = 0.4s;
.first_byte_timeout = 60s;
.between_bytes_timeout = 10s;
}

backend demo_webview {
.host = "127.0.0.1";
.port = "8000";
.connect_timeout = 0.4s;
.first_byte_timeout = 600s;
.between_bytes_timeout = 60s;
}

//backend dev_webview {
//.host = "127.0.0.1";
//.port = "8800";
//.connect_timeout = 0.4s;
//.first_byte_timeout = 600s;
//.between_bytes_timeout = 60s;
//}

backend dist_webview {
.host = "127.0.0.1";
.port = "8880";
.connect_timeout = 0.4s;
.first_byte_timeout = 600s;
.between_bytes_timeout = 60s;
}

backend rewrite_webview {
.host = "127.0.0.1";
.port = "8800";
.connect_timeout = 0.4s;
.first_byte_timeout = 600s;
.between_bytes_timeout = 60s;
}

backend rewrite_resources {
.host = "127.0.0.1";
.port = "6544";
.first_byte_timeout = 1200s;
.between_bytes_timeout = 600s;
}

backend rewrite_archive {
.host = "127.0.0.1";
.port = "6544";
.first_byte_timeout = 1200s;
.between_bytes_timeout = 600s;
}

acl purge {
    "localhost";
    "127.0.0.1";
    "128.42.169.35";
    "128.42.169.34";
    "128.42.169.11";
    "128.42.169.13";
    "128.42.169.17";
    "128.42.169.18";
}

acl nocache {
    "127.0.0.1";
    "10.0.0.0"/8;
    "128.42.0.0"/16;
    "168.2.0.0"/15;
    "168.4.0.0"/14;
}

import std;

sub vcl_recv {
    if (req.url == "/join_form") {
        error 403 "Access denied";
    }

    if (req.request == "POST" && req.url ~ "^/content/[mc]" && req.url !~ "(reuse_edit|(favorites|lens)_add)_inner" && req.url !~ "@@reuse-edit-view" && req.url !~ "lensAdd" && req.url !~ "setPrintedFile" && req.url !~ "updateParameters" && req.url !~ "manage_addProperty" && req.http.referer !~ "manage_propertiesForm") {
        error 403 "Access denied (POST)";
    }

    # hatjitsu dev server
    if (req.http.host ~ "^hatjitsu") {
        set req.backend = hatjitsu_backend;
        return (pass);
    }

    if (client.ip ~ block) {
        error 403 "Access denied";
    }

    # cnx rewrite archive
    if (req.http.host ~ "^devarchive" || req.url ~ "^/sitemap.xml" ) {
        set req.backend = rewrite_archive;
        if (req.url ~ "^/extras") {
            return (pass);
        }
        return (lookup);
    }

    # cnx demo webview
    if (req.http.host ~ "^demo") {
        set req.backend = demo_webview;
        if ( req.request == "POST" || req.request == "PUT" || req.url ~ "^/users" ){
            return (pass);
        }
        return (lookup);
    }

    # cnx dist webview
    if (req.http.host ~ "^dist") {
        set req.backend = dist_webview;
        if ( req.request == "POST" || req.request == "PUT" || req.url ~ "^/users" ){
            return (pass);
        }
        return (lookup);
    }

  //  # cnx dev webview
  //  if (req.http.host ~ "^dev.") {
  //      set req.backend = dev_webview;
  //      return (pass);
  //  }


    # resource images
    if (req.url ~ "^/resources/") {
        set req.backend = rewrite_resources;
        return (lookup);
    }


    if (req.url ~ "^/lenses") {
        if (req.http.user-agent ~ "Baiduspider" 
            || req.http.user-agent ~ "ScoutJet"
            || req.http.user-agent ~ "bingbot") {
            error 403 "Access denied";
        }
    }

    set req.grace = 120s;
    if (req.http.host ~ "^dev.cnx.org") {

        /* doing the static file dance */
        if (req.url ~ "^/pdfs") {
            set req.backend = static_backend;
            set req.url = regsub(req.url, "^/pdfs", "/files");
        }
        elsif (req.restarts == 0  && req.url ~ "^/content/.*/enqueue$") {
            set req.backend = legacy_backend;
            return(lookup);
        }
        elsif (req.restarts == 0  && req.url ~ "^/content/(m[0-9]+)/([0-9.]+)/.*format=pdf$") {
            set req.backend = static_backend;
            set req.url = regsub(req.url, "^/content/(m[0-9]+)/([0-9.]+)/.*format=pdf", "/files/\1-\2.pdf");
        }
        elsif (req.restarts == 1  && req.url ~ "^/files/(m[0-9]+)-([0-9.]+)\.pdf") {
            set req.backend = legacy_backend;
            set req.url = regsub(req.url, "^/files/(m[0-9]+)-([0-9.]+)\.pdf", "/content/\1/\2/?format=pdf");
        }
        elsif (req.url ~ "^/content/((col|m)[0-9]+)/latest/(pdf|epub)$") {
            set req.backend = legacy_backend;
            return(lookup);
        }
        elsif (req.url ~ "^/content/((col|m)[0-9]+)/([0-9.]+)/(pdf|epub)$") {
            set req.backend = static_backend;
            set req.url = regsub(req.url, "^/content/((col|m)[0-9]+)/([0-9.]+)/.*(pdf|epub)", "/files/\1-\3.\4");
        }
        elsif (req.url ~ "^/content/((col|m)[0-9]+)/([0-9.]+)/(complete|offline)$") {
            set req.backend = static_backend;
            set req.url = regsub(req.url, "^/content/((col|m)[0-9]+)/([0-9.]+)/(complete|offline)", "/files/\1-\3.\4.zip");
        }
        elsif (req.url ~ "^/content/(col[0-9]+)/([0-9.]+)/source$") {
            set req.backend = static_backend;
            set req.url = regsub(req.url, "^/content/(col[0-9]+)/([0-9.]+)/source", "/files/\1-\2.xml");
        }
        elsif (req.url ~ "^/content/((col|m)[0-9]+)/(([0-9.]+)|latest)/?") {
            set req.backend = rewrite_archive;
        }

        elsif (req.url ~ "^/content/((col|m)[0-9]+)/(([0-9.]+)|latest)/\?collection=col[0-9]*") {
            set req.backend = rewrite_archive;
        }
        // special cases for legacy
        elsif (req.url ~ "^/images/(advice\.png|example\.png|missing\.eps\.metadata|thick-left-arrow\.png|annot\.png|explanation\.png|question\.png|change\.png|magnify-glass-cnx\.png|rhaptos_powered\.png|comment\.png|missing\.eps|seealso\.png)"
               || req.url ~ "^/scripts/(fileSizeUnits|getUser|selectAllNoneInverse)") {
            set req.backend = legacy_backend;
        }
        elseif ( req.url ~ "^/aboutus/" ) {
            /*  avoid multiple rewrites on restart */
            if (req.url !~ "VirtualHostBase" ) {
                set req.url = "/VirtualHostBase/http/cnx.org:80/plone/VirtualHostRoot" + req.url;
            }
            set req.backend = legacy_backend;
        }
        // all rewrite webview
        elsif (req.url ~ "_escaped_fragment_=" || req.url ~ "^/$" || req.url ~ "^/opensearch\.xml" || req.url ~ "^/search" || req.url ~ "^/contents$" || req.url ~ "^/(contents|data|exports|styles|fonts|bower_components|node_modules|images|scripts)/" || req.url ~ "^/(about|about-us|people|contents|donate)" || req.url ~ "^/(login|logout|workspace|callback|users|publish)") {
            set req.backend = rewrite_webview;

            if ( req.request == "POST" || req.request == "PUT" || req.request == "DELETE" || req.url ~ "^/users" || req.url ~ "@draft"){
                return (pass);
            }
        }
        // everything else (including 404)
        else {
            /*  avoid multiple rewrites on restart */
            if (req.url !~ "VirtualHostBase" ) {
                set req.url = "/VirtualHostBase/http/legacydev.cnx.org:80/plone/VirtualHostRoot" + req.url;
            }
            set req.backend = legacy_backend;
        }
    }
    elsif (req.http.host ~ "^accounts") {
        error 770 "Moved Permanentely" ;
    }
    elsif (req.http.host ~ "^passthru") {
        set req.backend = legacy_backend;
    }
    
    elsif (req.http.host ~ "^legacydev.cnx.org") {
        /*  avoid multiple rewrites on restart */
        if (req.url !~ "VirtualHostBase" ) {
            set req.url = "/VirtualHostBase/http/legacydev.cnx.org:80/plone/VirtualHostRoot" + req.url;
        }
        set req.backend = legacy_backend;
    }
	else     {
		error 750 "Moved Permanently" ;
	}
    
    if (req.request == "PURGE") {
        if (!client.ip ~ purge) {
            error 405 client.ip;
        }
        set req.url = req.url + "$";
        ban_url(req.url);
        std.log("purge url: " + req.url);
        error 200 "Purged";
    }
   if (req.request == "PURGE_REGEXP") {
        if (!client.ip ~ purge) {
                error 405 "Not allowed.";
        }
        ban_url(req.url);
        std.log("purge regexp: " + req.url);
        error 200 "Purged";
    }

    if (req.request != "GET" && req.request != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return(pass);
    }

    if (req.http.If-None-Match) {
        return(pass);
    }

    if (req.url ~ "createObject") {
        return(pass);
    }

    if (req.url ~ "//$") {
        error 700 "Bad URL";
    }

    call normalize_accept_encoding;
    call annotate_request;
    return(lookup);
}

sub vcl_pipe {
    # This is not necessary if you do not do any request rewriting.
    set req.http.connection = "close";
}

sub vcl_hit {
    if (obj.ttl <= 0s) {
        return(pass);
    }
    if (req.request == "PURGE") {
        set obj.ttl = 0s;
        error 200 "Purged";
    }
    if (req.http.X-Force-Refresh == "refresh") {
        # Allow client refresh via magic header
        set obj.ttl = 0s;
        return (restart);
    }
    if (req.http.Cache-Control ~ "no-cache") {
        # like msnbot that send no-cache with every request.
        if (client.ip ~ nocache) {
            set obj.ttl = 0s;
            return (restart);
        } 
    }
}

sub vcl_miss {
    if (req.request == "PURGE") {
        error 404 "Not in cache";
    }

}

sub vcl_fetch {
    if (beresp.status >= 500) {
        set beresp.ttl = 0s;
    }
    if (beresp.status == 404 && req.url ~ "^/files/(m[0-9]+)-([0-9.])+\.pdf") {
    return (restart);
    }
    if (beresp.status >= 300) {
        if (req.url !~ "/content/") {
            set beresp.http.X-Varnish-Action = "FETCH (pass - status > 300, not content)";
            return(hit_for_pass);
        }
    }

    set beresp.grace = 120s;
    if (beresp.ttl <= 0s) {
        set beresp.http.X-Varnish-Action = "FETCH (pass - not cacheable)";
        return(hit_for_pass);
    }

    if (!beresp.http.Cache-Control ~ "s-maxage=[1-9]" && beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
        set beresp.http.X-Varnish-Action = "FETCH (pass - response sets private/no-cache/no-store token)";
        return(hit_for_pass);
    }
    if (req.http.Authorization && !beresp.http.Cache-Control ~ "public") {
        set beresp.http.X-Varnish-Action = "FETCH (pass - authorized and no public cache control)";
        return(hit_for_pass);
    }
    if (req.http.X-Anonymous && !beresp.http.Cache-Control) {
        set beresp.ttl = 600s;
        set beresp.http.X-Varnish-Action = "FETCH (override - backend not setting cache control)";
    }

    # Default based on %age of Last-Modified, like squid
    if (!beresp.http.Cache-Control && !beresp.http.Expires) {
        C{
            double factor = 0.2;
            double age = 0;
            char *lastmod = 0;
            time_t lmod;
            
            lastmod = VRT_GetHdr(sp, HDR_BERESP, "\016Last-Modified:");
            if (lastmod) {
                lmod =  TIM_parse(lastmod);
                age = TIM_real() - lmod;
                VRT_l_beresp_ttl(sp, age*factor);  
            } 
         }C
        set beresp.http.X-FACTOR-TTL = "ttl: " + beresp.ttl;
    }

    if (req.url ~ "content/OAI\?verb=List(Identifier|Record)s&metadataPrefix=[^&]*$") {
        set beresp.ttl = 7d; 
        set beresp.http.X-My-Header = "OAI";
    }
    if (req.url ~ "content/randomContent") {
        return(hit_for_pass);
    }
    if (req.url ~ "content/[^/]*/[0-9.]*/(\?format=)?pdf$") {
        set beresp.ttl = 7d; 
        set beresp.http.X-My-Header = "VersionedPDF";
    }
    if (req.url ~ "content/[^/]*/latest/(\?format=)?pdf$") {
        set beresp.http.X-My-Header = "LatestPDF";
        return(hit_for_pass);
    }
    if (req.url ~ "content/[^/]*/[0-9.]*/offline$") {
        set beresp.ttl = 90d; 
        set beresp.http.X-My-Header = "VersionedOfflineZip";
    }
    if (req.url ~ "content/[^/]*/[0-9.]*/complete$") {
        set beresp.ttl = 90d; 
        set beresp.http.X-My-Header = "VersionedCompleteZip";
    }
    if (req.http.host ~ "^demo") {
        set beresp.ttl = 0s; 
        set beresp.http.X-My-Header = "demo - uncached";
    }
    call rewrite_s_maxage;
        return(deliver);
}

sub vcl_error {
    if (obj.status == 770) {
        set obj.http.Location = "https://accounts.cnx.org" + req.url;
        set obj.status = 302;
        return(deliver);
    }elsif (obj.status == 750) {
        set obj.http.Location = "http://" + regsub(req.http.host,"^[^:]*","legacydev.cnx.org") + req.url;
        set obj.status = 301;
        return(deliver);
    } elsif (obj.status == 700) {
        set obj.http.Location = req.http.host + regsub(req.url,"//$","/");
        set obj.status = 301;
        return(deliver);
    }
}

sub vcl_deliver {
        if (obj.hits > 0) {
                set resp.http.X-Cache = "HIT";
        } else {
                set resp.http.X-Cache = "MISS";
        }
    call rewrite_age;
}

sub vcl_hash {
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }
    if (req.http.Accept ~ "application/xhtml\+xml" && req.url ~ "^/contents/") {
        hash_data("application/xhtml+xml");
    }
    return (hash);
}

##########################
#  Helper Subroutines
##########################

# Optimize the Accept-Encoding variant caching
sub normalize_accept_encoding {
    if (req.http.Accept-Encoding) {
        if (req.url ~ "\.(jpe?g|png|gif|swf|pdf|gz|tgz|bz2|tbz|zip)$" || req.url ~ "/image_[^/]*$") {
            remove req.http.Accept-Encoding;
        } elsif (req.http.Accept-Encoding ~ "gzip") {
            set req.http.Accept-Encoding = "gzip";
        } else {
            remove req.http.Accept-Encoding;
        }
    }
}

# Keep auth/anon variants apart if "Vary: X-Anonymous" is in the response
# Also, duplicate logic of content_type_decide, in support of IE8
sub annotate_request {
    # X-Collection
    if (req.http.cookie ~ "(^|.*; )courseURL=") {
        set req.http.X-Collection = regsub(req.http.cookie, "^.*?courseURL=([^;]*);*.*$", "\1");
    }
    if (!(req.http.Authorization || req.http.cookie ~ "(^|.*; )__ac=" || req.http.cookie ~ "(^|.*; )cosign")) {
        set req.http.X-Anonymous = "True";
    }
    if (req.http.Accept ~ "application\/xhtml\+xml") {
        set req.http.X-Content-Type = "application/xhtml+xml";
    } else {
        set req.http.X-Content-Type = "text/html";
    }

}

# The varnish response should always declare itself to be fresh
sub rewrite_age {
    if (resp.http.Age) {
        set resp.http.X-Varnish-Age = resp.http.Age;
        set resp.http.Age = "0";
    }
}

# Rewrite s-maxage to exclude from intermediary proxies
# (to cache *everywhere*, just use 'max-age' token in the response to avoid this override)
sub rewrite_s_maxage {
    if (beresp.http.Cache-Control ~ "s-maxage") {
        set beresp.http.Cache-Control = regsub(beresp.http.Cache-Control, "s-maxage=[0-9]+", "s-maxage=0");
    }
}

